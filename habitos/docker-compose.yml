version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: habitos-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-habitos}
      POSTGRES_USER: ${POSTGRES_USER:-habitos_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-habitos_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - habitos-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-habitos_user} -d ${POSTGRES_DB:-habitos}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: habitos-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-habitos_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - habitos-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Flask Backend
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: habitos-backend
    restart: unless-stopped
    environment:
      # Flask Configuration
      FLASK_ENV: ${FLASK_ENV:-production}
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}

      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-habitos_user}:${POSTGRES_PASSWORD:-habitos_password}@postgres:5432/${POSTGRES_DB:-habitos}
      DATABASE_POOL_SIZE: ${DATABASE_POOL_SIZE:-10}
      DATABASE_MAX_OVERFLOW: ${DATABASE_MAX_OVERFLOW:-20}
      DATABASE_POOL_TIMEOUT: ${DATABASE_POOL_TIMEOUT:-30}
      DATABASE_POOL_RECYCLE: ${DATABASE_POOL_RECYCLE:-3600}

      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-habitos_redis_password}@redis:6379/0

      # Email Configuration
      MAIL_SERVER: ${MAIL_SERVER:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USE_TLS: ${MAIL_USE_TLS:-true}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_DEFAULT_SENDER: ${MAIL_DEFAULT_SENDER}

      # AI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GEMINI_MODEL: ${GEMINI_MODEL:-gemini-1.5-flash}
      GEMINI_MAX_TOKENS: ${GEMINI_MAX_TOKENS:-2048}
      GEMINI_TEMPERATURE: ${GEMINI_TEMPERATURE:-0.7}

      # Google OAuth Configuration
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173,http://frontend:80}

      # Feature Flags
      ENABLE_AI_INSIGHTS: ${ENABLE_AI_INSIGHTS:-true}
      ENABLE_JOURNAL_PROMPTS: ${ENABLE_JOURNAL_PROMPTS:-true}
      ENABLE_SENTIMENT_ANALYSIS: ${ENABLE_SENTIMENT_ANALYSIS:-true}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Monitoring (optional)
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
    volumes:
      - ./backend/logs:/app/logs
    ports:
      - "5001:5001"
    networks:
      - habitos-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:5001/health', timeout=10)",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: production
    container_name: habitos-frontend
    restart: unless-stopped
    environment:
      # Frontend environment variables
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5001}
      VITE_APP_NAME: ${VITE_APP_NAME:-HabitOS}
      VITE_APP_VERSION: ${VITE_APP_VERSION:-1.0.0}
    ports:
      - "3000:80"
    networks:
      - habitos-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:80/",
        ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Nginx Reverse Proxy (optional - for production)
  nginx:
    image: nginx:alpine
    container_name: habitos-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - habitos-network
    depends_on:
      - frontend
      - backend
    profiles:
      - production

# Networks
networks:
  habitos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
